version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  create_ec2:
    description: Creates an EC2 instance on aws
    steps:
      - run:
          name: Create Cloudformation Stack for EC2
          command: |
            aws cloudformation create-stacks \
              --template-file create_ec2.yml \
              --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: install_failed
          command: echo "[X] Error!! Could not install dependencies"
          when: on_fail
      - run:
          name: check stack events
          command: | 
            aws cloudformation describe-stack-events \
              --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail

  rollback_failed_commit:
    description: rolls back most recent commit due to failure by destroying environment
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  print_hello_world:  # Choose any name, such as `build`
      docker:
        - image: circleci/node:10.16.3
      steps:
        - checkout
        - run: echo "hello world"

  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - create_ec2

  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["3c:2d:ac:b9:49:4c:37:11:6d:1e:f0:66:67:a6:11:07"] 
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: ansible-playbook -i inventory ansible.cfg

  url_smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - rollback_failed_commit

# Sequential workflow
workflows:
  smoke_test_builds:
    jobs:
      - print_hello_world
      # - create_infrastructure
      # - configure_infrastructure
      - url_smoke_test
      