version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  create_ec2:
    description: Creates an EC2 instance on aws
    steps:
      - run:
          name: Create Cloudformation Stack for EC2
          command: |
            aws cloudformation deploy \
              --template-file create_ec2.yml \
              --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1
      - run:
          name: stack_deploy_fail
          command: echo "[X] stack deploy failed. Running stack events check"
          when: on_fail
      - run:
          name: check stack events
          command: | 
            aws cloudformation describe-stack-events \
              --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5}
          when: on_fail
      - rollback_failed_commit

  rollback_failed_commit:
    description: rolls back most recent commit due to failure by destroying environment
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name circleci-infra-create-${CIRCLE_WORKFLOW_ID:0:5}

# Define the jobs we want to run for this project
jobs:
  print_hello_world:  # Choose any name, such as `build`
      docker:
        - image: circleci/node:10.16.3
      steps:
        - checkout
        - run: echo "hello world"

  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - create_ec2

  fetch_ec2_ip:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: touch ~/inventory
      - run: echo [all] > ~/inventory
      - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
      - run:
          name: ip fetch fail
          command: echo "[X] Failed tO fetch web server IP addresses!!"
          when: on_fail

  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["3c:2d:ac:b9:49:4c:37:11:6d:1e:f0:66:67:a6:11:07"] 
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: ansible-playbook -i inventory.txt setup_server_on_ec2.yml

  url_smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - rollback_failed_commit


  create_cloudfront:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: |
        aws cloudformation deploy \
          --template-file cloudfront.yml \
          --stack-name production-distro \
          --parameter-overrides PipelineID=circle-ci-promote-dewa 
      - run:
          name: cloudfront creation fail
          command: echo "[X] Failed tO create cloudfront"
          when: on_fail

# Executes the bucket.yml - Deploy an S3 bucket, and interface with that bucket to synchronize the files between local and the bucket.
# Note that the `--parameter-overrides` let you specify a value that override parameter value in the bucket.yml template file.
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Execute bucket.yml - Create Cloudformation Stack
         command: |
           aws cloudformation deploy \
           --template-file bucket.yml \
           --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
           --parameter-overrides MyBucketName="frontendBucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  # Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
  # Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name production-distro \
              --parameter-overrides PipelineID="frontendBucket-${CIRCLE_WORKFLOW_ID:0:7}"

  # Destroy the previous production version's S3 bucket and CloudFormation stack. 
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Sequential workflow
workflows:
  cd_pipeline:
    jobs:
      - print_hello_world
      - create_infrastructure
      - fetch_ec2_ip:
          requires:
            - create_infrastructure
      - configure_infrastructure:
          requires:
            - fetch_ec2_ip
      - url_smoke_test:
          requires:
            - configure_infrastructure
      - create_cloudfront
      - create_and_deploy_front_end
          requires:
            - create_cloudfront
      - promote_to_production:
          requires:
            - create_and_deploy_front_end
      - get_last_deployment_id:
          requires:
            - create_and_deploy_front_end
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production